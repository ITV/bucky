@import Main._

@sect{Receiving messages}
  @p
    This section shows how your application can use Bucky to receive messages from an AMQP queue.
  @p
    Note: we usually refer to the act of receiving a message as "consuming" or "consumption" of a message. The component used to do this is referred to as a "consumer".
  @p
    By convention we expect a consumer to declare the Queue and Queue Bindings needed to route copies of messages to the consumer.

  @sect{Low Level Message Consumption}
    @p
      These snippets show how to build a consumer that will receive messages from an AMQP Queue.

     @hl.ref(
      wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'basic/"RawConsumer.scala",
      start = "val brokerHostname",
      end = "end snippet 1"
    )

    @p
      This is some fairly mundane stuff. A bit of config so we know where to point the @hl.scala{AmqpClient} at, and the declarations of the AMQP resources we'll use (a Queue, Binding and Exchange).

    @hl.ref(
      wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'basic/"RawConsumer.scala",
      start = "val handler",
      end = "end snippet 2"
    )

    @p
      Now, here's the bulk of how we process messages: an instance of @hl.scala{Handler[Future, Delivery]}. @hl.scala{Delivery} is a type defined in Bucky that represents an arbitrary valid AMQP delivery.
    @p
      A @hl.scala{Handler[M[_], T]} is a function that receives a @hl.scala{T} representing a message on a queue, and returns a @hl.scala{M[ConsumeAction]} telling Bucky what to do after the message is processed.

    @hl.ref(
      wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'basic/"RawConsumer.scala",
      start = "val consumerLifecycle",
      end = "end snippet 3"
    )

    @p
      Here's where it all comes together. We define a @hl.scala{Lifecycle[Unit]} that connects to the AMQP broker, declares the resources we need, and then starts a consumer that feeds in to the previously defined @hl.scala{Handler[Future, Delivery]}
    @p
      If you're not familiar with what the @hl.scala{Lifecycle} is doing, @lnk("read all about resource management here", "#Resourcemanagement")!

  @sect{High Level Message Consumption}
    @p
      The definition of a consumer in the previous section was pretty good. But it's a commmon pattern @hl.scala{Handler[M[_], T]} instances to want to process messages that are a high level domain type, and reject messages that are not syntactically correct.
    @p
      Bucky has support for this, and it all begins with defining a @hl.scala{PayloadUnmarshaller[T]} for your type.

    @hl.ref(
      wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'marshalling/"UnmarshallingConsumer.scala",
      start = "def csvStringToPerson",
      end = "end snippet 2"
    )

    Now we've got an unmarshaller for @hl.scala{Person}, we're able to define a @hl.scala{Handler[Future, Person]} and hook it up to a consumer:

    @hl.ref(
      wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'marshalling/"UnmarshallingConsumer.scala",
      start = "val personHandler",
      end = "end snippet 3"
    )
    There's no need to handle the case in which we receive a message that is not a valid @hl.scala{Person}. The @hl.scala{Handler[Future, Person]} will only process a message if the @hl.scala{PayloadUnmarshaller[Person]} approved of it.
    @sect{Putting it all together}
      @p
        So how do we start a consumer that will feed messages to this handler?
      @hl.ref(
        wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'marshalling/"UnmarshallingConsumer.scala",
        start = "val lifecycle:",
        end = "end snippet 4"
      )
      @p
        Boom, and that's the basics of high level message consumption.