@import Main._

@sect{Resource management}
  @p
    When using a message broker it's inevitable you'll have to interact with objects that are stateful or of finite quantity.
    Prime examples might be a connection to the message broker, an instance of a consumer for a queue, or an instance of a message publisher.

  @p
    It's important that you "reset" or "release" such resources after usage, so Bucky adds a layer of abstraction when it allocates them for you.

  @p
    By default, Bucky uses @lnk("ITV Lifecycle", "https://github.com/ITV/lifecycle") for resource management.
    But you can easily choose to not use any resource management, or a different solution.
    A brief intro to resource management with @lnk("ITV Lifecycle", "https://github.com/ITV/lifecycle") is available below.

  @sect{An introduction to ITV lifecycle}
    @p
      The easiest way to demonstrate @lnk("ITV Lifecycle", "https://github.com/ITV/lifecycle") is to conceive a fictitious implementation of a connection to an AMQP broker:

    @hl.ref(
      wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'lifecycle/"LifecycleExample.scala",
      start = "case class AmqpConnection",
      end = "end snippet 1"
    )

    @p
      This is a horribly stateful connection, that will allow you to allocate a channel when a connection is open.
      A channel is a (fictitious) unidirectional channel of communication, that allows you to start/stop consuming a queue:

    @hl.ref(
      wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'lifecycle/"LifecycleExample.scala",
      start = "case class AmqpChannel",
      end = "end snippet 2"
    )

    @p
      Our challenge: write a program that performs some logic after an AmqpConnection has been opened, AmqpChannel allocated, and consumer started.
      When the program logic has been performed, the allocated resources must be shut down in order - even if the program logic throws an exception.

    @sect{A method of manual resource management}
      You could perform resource management manually like so:

      @hl.ref(
        wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'lifecycle/"LifecycleExample.scala",
        start = "object ManualExample",
        end = "end snippet 3"
      )

    @p
      This is awful, and you should feel bad just reading it. The main issues with this are:

      @ul
        @li
          It's pushing the stateful and imperative nature of the resource interaction into our program
        @li
          The blocks of resource usage aren't easily composible - as we add more resources the complexity of our program will skyrocket
        @li
          Due to the above, it'd be dead easy to make a mistake and leak a resource.

    @sect{Lifecycle: composible resource management}
      @p
        Lifecycle helps this issue by asking for a Lifecycle instance to be implemented for each stateful resource type:

      @hl.ref(
        wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'lifecycle/"LifecycleExample.scala",
        start = "val connectionLifecycle",
        end = "end snippet 4"
      )

      @p
        The Lifecycle instance describes how to allocate, initialise and tear down a resource of a specific type.
      @p
        It is Monadic, so has your usual friends @hl.scala{map} and @hl.scala{flatMap} for resource composition.

      @hl.ref(
        wd/'example/'src/'main/'scala/'com/'itv/'bucky/'example/'lifecycle/"LifecycleExample.scala",
        start = "object LifecycleExample",
        end = "end snippet 5"
      )

      @p
        The aim is that:
      @ul
        @li
          Your program is now abstracted from management of stateful or finite resources
        @li
          Your program is now safer and easier to reason about

      @p
        Much more detailed examples are available on the @lnk("ITV Lifecycle github project", "https://github.com/ITV/lifecycle"), but hopefully this primer will get you started as a user of Bucky.
